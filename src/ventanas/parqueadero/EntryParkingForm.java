/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas.parqueadero;

import controllers.AccountJpaController;
import controllers.BillingJpaController;
import controllers.ClientProviderJpaController;
import controllers.ConfigurationsJpaController;
import controllers.DetailBillingJpaController;
import controllers.PersonJpaController;
import controllers.ProductJpaController;
import controllers.UserContractJpaController;
import entities.Account;
import entities.Billing;
import entities.Configurations;
import entities.DetailBilling;
import entities.Product;
import entities.UserContract;
import java.awt.Dimension;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DocumentFilter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.tools.ant.taskdefs.Sequential;
import utilitarios.UpperCaseDocumentFilter;

/**
 *
 * @author macbookpro
 */
public class EntryParkingForm extends javax.swing.JDialog {

    public Billing billing;
    public ClientProviderJpaController clientController;
    public BillingJpaController controller;
    public DetailBillingJpaController detailController;
    public PersonJpaController personController;
    public AccountJpaController accountController;
    public ProductJpaController productController;
    public UserContractJpaController userContractController;
    static ConfigurationsJpaController configController = null;
    public Product product = null;

    /**
     * Creates new form EnterParkinForm
     *
     * @param parent
     * @param modal
     * @param b
     */
    public EntryParkingForm(java.awt.Frame parent, boolean modal, Billing b) {
        super(parent, modal);
        initComponents();

        DateFormat day = new SimpleDateFormat("EEE, d MMM yyyy ");
        DateFormat time = new SimpleDateFormat("HH:mm:ss");
        Date today = Calendar.getInstance().getTime();
        String reportDay = day.format(today);
        String reportDate = time.format(today);
        dayLbl.setText(reportDay);
//        ticketNro.setText(b.getNumber());

        clientController = new ClientProviderJpaController();
        controller = new BillingJpaController();
        detailController = new DetailBillingJpaController();
        personController = new PersonJpaController();
        accountController = new AccountJpaController();
        productController = new ProductJpaController();
        configController = new ConfigurationsJpaController();

        Query q = productController.getEm().createQuery("Select p from Product p where p.code =:code and p.active=true");
        q.setParameter("code", "park001");
        List<Product> productList = q.getResultList();

        if (!productList.isEmpty()) {
            product = productList.get(0);
        }

        this.billing = b;
        DocumentFilter filter = new UpperCaseDocumentFilter();
        ((AbstractDocument) placaTxt.getDocument()).setDocumentFilter(filter);

        //fijar la hora
        timeLbl.setText(reportDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        dayLbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        timeLbl = new javax.swing.JLabel();
        placaTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ingreso de nuevo veh√≠culo");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Hora:");

        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jButton1.setMnemonic('R');
        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jButton2.setMnemonic('C');
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dayLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        dayLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dayLbl.setText("08:50:30");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setText("Nuevo ingreso");

        timeLbl.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        timeLbl.setText("08:50:30");

        placaTxt.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        placaTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placaTxtActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Placa:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(placaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayLbl)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(timeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(placaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        generateTicket();

    }//GEN-LAST:event_jButton1ActionPerformed

    private int numSecuencial;

    private void generarSecuencial() {
        List<Configurations> sequences = new ArrayList<>();

        Object data = configController.getEntityManager().createNativeQuery("Select valor from configuraciones where codigo = 'SECUENCIAL_ACT' ").getSingleResult();
        System.out.println(data);
//        sequences = checkConfigurations("SECUENCIAL_ACT");

//        if (!sequences.isEmpty()) {
//            secuencial = sequences.get(0).getValue();
//        }
        numSecuencial = Integer.parseInt(data.toString());
//        numSecuencial++;
//        secuencial = formatoSecuencial(numSecuencial);
    }

    private void generateTicket() {

        if (product == null) {
            JOptionPane.showMessageDialog(this,
                    "No se encuentra definido el item parqueadero", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //revisar si ingreso una placa caso contrario se cobrara de manera 
        //normal
        String placa = placaTxt.getText();
        String state = "GENERADA";

        if (!placa.trim().isEmpty()) {
            Date currentDate = new Date();
            Query q = productController.getEm().
                    createNamedQuery("UserContract.findBylicensePlateAndDate");
            q.setParameter("currentDate", currentDate);
            q.setParameter("licensePlate", placa);
            List<UserContract> usersContract = q.getResultList();

            if (usersContract.isEmpty()) {
                JOptionPane.showMessageDialog(this, "La placa del veh√≠culo no "
                        + " se encuentra en el contrato.\n No se puede registrar "
                        + "el ingreso.  ", "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                //fija el cliente
                this.billing.setClientProviderid(usersContract.get(0).getClient());
                state = "CONTRATO";
            }
        }

        generarSecuencial();

        this.billing.setSequential(numSecuencial+"");
        
        DetailBilling detail = new DetailBilling();
        detail.setBillingId(this.billing);
        detail.setQuantity(BigDecimal.ONE);
        detail.setTotal(BigDecimal.ZERO);
        detail.setProductId(product);
        detail.setTimestart(this.billing.getEmissiondate());
        detail.setTotal(BigDecimal.ZERO);
        detail.setPercentageIva(BigDecimal.ZERO);
        detail.setUnitaryPrice(BigDecimal.ZERO);
        detail.setValueIva(BigDecimal.ZERO);
        detail.setPercentageDiscount(BigDecimal.ZERO);
        detail.setValueDiscount(BigDecimal.ZERO);

        this.billing.setNumber(""+numSecuencial);
        this.billing.setState(state);
        this.billing.setAdditionalInformation(placaTxt.getText());
        this.billing.getDetailBillingList().add(detail);

        try {
            controller.create(this.billing);
//            detailController.create(detail);

            Account account = new Account();
            account.setBalance(BigDecimal.ZERO);
            account.setTotal(BigDecimal.ZERO);
            account.setDateCreation(new Date());
            account.setBillingId(this.billing);
            account.setState("Abierta");
            accountController.create(account);

            actualizarSecuencial();
            printTicket();

        } catch (Exception ex) {
            Logger.getLogger(EntryParkingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }

    private void placaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placaTxtActionPerformed
        generateTicket();
    }//GEN-LAST:event_placaTxtActionPerformed

    /**
     *
     */
    private void printTicket() {
        Locale local = Locale.getDefault();
        ResourceBundle resource = ResourceBundle.getBundle("values", local);
        String reportPath = resource.getString("pathJasper") + "comPark.jasper";
        List<Billing> facturas = new ArrayList<>();
        facturas.add(this.billing);
        try {
            FileInputStream fis = new FileInputStream(reportPath);
            BufferedInputStream bufferedInputStream = new BufferedInputStream(fis);
            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(bufferedInputStream);
            JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(facturas);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), beanCollectionDataSource);
            // view report to UI
//            JasperViewer viewer = new JasperViewer(jasperPrint, false);
//            viewer.setVisible(true);
            
            JasperPrintManager.printReport(jasperPrint, false);
        } catch (JRException | FileNotFoundException ex) {
            Logger.getLogger(ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Actualiza el secuencial de factura de venta
     */
    private void actualizarSecuencial() {

        try {
            Map<String, Object> variables = new HashMap<>();
            Integer sequential = Integer.valueOf(this.billing.getNumber()) + 1;
            /*
             variables.put("code", "SECUENCIAL_ACT");
             Configurations config = configController.namedQuery("Configurations.findByCode", variables).get(0);
           
             config.setValue(sequential.toString());
             configController.edit(config);
             */
            EntityTransaction tx = configController.getEm().getTransaction();
            tx.begin();
            Query q = configController.getEm().createNativeQuery("update configuraciones set valor='" + sequential.toString() + "' "
                    + "where codigo='SECUENCIAL_ACT' ");
            q.executeUpdate();

            tx.commit();
        } catch (Exception ex) {
            System.out.println(ex);
            Logger.getLogger(EntryParkingForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntryParkingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EntryParkingForm dialog = new EntryParkingForm(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dayLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField placaTxt;
    private javax.swing.JLabel timeLbl;
    // End of variables declaration//GEN-END:variables
}
